{"version":3,"sources":["UploadIndicator.js","CreationModal.js","Form.js","threeVisualizer.js","App.js","serviceWorker.js","index.js"],"names":["UploadIndicator","show","className","type","color","height","width","top","bottom","CreationModal","close","children","useState","files","setFiles","datasetName","setDatasetName","hasName","setHasName","infoAvailable","setInfoAvailable","uploading","setUploading","uploadComplete","setUploadComplete","delay","ms","Promise","res","setTimeout","clearStateAndClose","document","getElementById","reset","a","id","action","method","enctype","name","placeholder","onChange","event","persist","target","value","disabled","accept","multiple","htmlFor","length","onClick","checkLoginStatus","window","location","replace","EmbeddingForm","props","state","selectedValue","createMode","submissionCallback","callback","setSelection","bind","showModal","hideModal","this","setState","console","log","userDatasets","map","key","submitSelection","React","Component","Image","size","Atlas","image","numImages","numRows","numColumns","Point","x","y","z","randomInt","val","Math","random","undefined","AtlasGeometry","atlas","points","i","coords","vertices","push","THREE","faceOne","faceTwo","faces","xOffset","yOffset","floor","faceVertexUvs","ThreeRenderer","dataset","canvasWidth","canvasHeight","canvas","createElement","mount","appendChild","style","camera","position","createCanvas","renderer","antialias","setSize","scene","createCamera","light","set","add","controls","TrackballControls","domElement","loader","setCrossOrigin","query","concat","material","load","geometry","mesh","render","requestAnimationFrame","update","ref","App","datasets","selectedDataset","fetchUserDatasets","selectionCallback","selection","fetch","then","response","json","Boolean","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d0284469.chunk.js","sourcesContent":["import React from 'react';\nimport Loader from 'react-loader-spinner';\n\nfunction UploadIndicator({ show }) {\n\n  return (\n    show && (\n      <div className=\"creation-modal\">\n        <Loader\n          type=\"TailSpin\"\n          color=\"#4287f5\"\n          height=\"100\"\n          width=\"100\"\n          top=\"auto\"\n          bottom=\"auto\"\n        /> \n      </div>\n    )\n  );\n}\n\nexport default UploadIndicator;\n","import React, { useState } from 'react';\nimport UploadIndicator from './UploadIndicator.js';\nimport styles from './CreationModal.scss';\n\nfunction CreationModal({ show, close, children }) {\n  // ------STATE MANAGEMENT-------\n  const [files, setFiles] = useState([]);\n  const [datasetName, setDatasetName] = useState(\"\");\n  const [hasName, setHasName] = useState(false);\n  const [infoAvailable, setInfoAvailable] = useState(false);\n  const [uploading, setUploading] = useState(false);\n  const [uploadComplete, setUploadComplete] = useState(false);\n  const delay = ms => new Promise(res => setTimeout(res, ms));\n\n  function datasetNameChange(event) {\n    event.persist();\n    setDatasetName(event.target.value);\n    setHasName(true);\n  }\n\n  function fileUpload(event) {\n    event.persist();\n    setFiles([...files, ...event.target.files]);\n    setInfoAvailable(true);\n  }\n\n  // Resets state to default values so that dialog refreshes if user enters again\n  function clearStateAndClose() {\n    setFiles([]);\n    setDatasetName([]);\n    setHasName(false);\n    setInfoAvailable(false);\n    setUploadComplete(false);\n    document.getElementById(\"input-dialog\").reset();\n\n    close();\n  }\n  \n  async function datasetUpload() {\n    setUploading(true);\n    await delay(4000); // Temporarily mock upload until web infrastructure in place\n    setUploading(false);\n    setUploadComplete(true);\n  }\n  \n  return (\n    show && (\n    <div className='creation-modal'>\n      <section className=\"modal-main\">\n        <UploadIndicator show={uploading}/>\n        <form className=\"input-dialog\" id=\"input-dialog\" action=\"/upload\" method=\"POST\" enctype=\"multipart/form-data\">\n          <input\n            type=\"text\"\n            className=\"dataset-namer\"\n            id=\"dataset-namer\"\n            name=\"dataset-namer\"\n            placeholder=\"Dataset name...\"\n            onChange={datasetNameChange}\n          />\n          <input\n            type=\"file\"\n            className=\"file-upload-dialog\"\n            id=\"file-upload-dialog\"\n            name=\"file-upload-dialog\"\n            onChange={fileUpload}\n            disabled={!hasName}\n            accept=\".jpg, .jpeg, .png\"\n            multiple\n          />\n          <label className=\"file-label\" htmlFor=\"file-upload-dialog\">\n            Browse for photos\n          </label>\n          <div className=\"uploadInfo\">\n            <div className=\"dataset-info\" disabled={!infoAvailable}>\n              <p>Dataset Info:</p>\n              <p>Name: {datasetName.length ? datasetName : \"N/A\"}</p>\n              <p>Number of images: {files.length > 0 ? files.length : \"N/A\"}</p>\n            </div>\n            {!uploadComplete && (\n              <button\n                type=\"submit\"\n                className=\"dataset-upload\"\n                disabled={!infoAvailable}\n                onClick={datasetUpload}\n              >\n                Upload dataset\n              </button>\n            )}\n          </div>\n          {uploadComplete && (\n            <div className=\"post-upload\">\n              <p>Dataset upload complete!</p>\n              <button className=\"close-modal\" onClick={clearStateAndClose}>\n                Close\n              </button>\n            </div>\n          )}\n        </form>\n        {!uploadComplete && (\n          <button className=\"cancel\" onClick={clearStateAndClose}>\n            Cancel\n          </button>\n        )}\n      </section>\n    </div>\n  ));\n}\n\nexport default CreationModal;\n","import React from 'react';\nimport CreationModal from './CreationModal.js';\n\nconst checkLoginStatus = () => {\n  // Determine Log-in status of user\n  window.location.replace('/authenticate');\n};\n\nclass EmbeddingForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedValue: \"\",\n      createMode: false\n    };\n\n    this.submissionCallback = props.callback;\n\n    this.setSelection = this.setSelection.bind(this);\n    this.showModal = this.showModal.bind(this);\n    this.hideModal = this.hideModal.bind(this);\n  }\n\n  setSelection(event) {\n    event.persist();\n    this.setState({selectedValue: event.target.value}, () => {\n      console.log(this.state.selectedValue)\n    });\n  }\n\n  submitSelection() {\n    this.submissionCallback(this.state.selectedValue);\n  }\n\n  // Handles showing and hiding modal for dataset uploads\n  showModal() {\n    this.setState({ createMode: true });\n  }\n\n  hideModal() {\n    this.setState({ createMode: false });\n  }\n\n  render() {\n    return (\n      <div className=\"form-wrapper\">\n        <CreationModal show={this.state.createMode} close={this.hideModal} />\n        <button type=\"button\" onClick={checkLoginStatus}>Login/Logout</button>\n        <br />\n        <div className=\"form\">\n          <div className=\"embedding-form\">\n              <label className=\"form-category\">\n                <span className=\"category-title\">Dataset:</span>\n                <select onChange={this.setSelection} name=\"dataset\" id=\"dataset\">\n                  {this.props.userDatasets.map(value => (\n                    <option className=\"form-option\" key={value} value={value}>\n                      {value}\n                    </option>\n                  ))}\n                </select>\n              </label>\n            <button onClick={this.submitSelection} className=\"form-submit\">\n              Submit\n            </button>\n          </div>\n        </div>\n        <button\n          type=\"button\"\n          className=\"create-dataset-button\"\n          onClick={this.showModal}\n        >\n          Create a new dataset\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default EmbeddingForm;\n","import * as THREE from 'three';\nimport React from 'react';\nimport { TrackballControls } from 'three/examples/jsm/controls/TrackballControls.js';\n\nclass Image {\n  constructor(size) {\n    this.width = size;\n    this.height = size;\n  }\n}\n\nclass Atlas {\n  constructor(image, numImages, numRows, numColumns) {\n    this.image = image;\n    this.width = image.width * numColumns;\n    this.height = image.height * numRows;\n    this.numImages = numImages;\n  }\n}\n\nclass Point {\n  constructor(x, y, z) {\n    function randomInt() {\n      const val = Math.random() * 700;\n      return Math.random() > 0.5 ? -val : val;\n    }\n\n    if (x == undefined) {\n      this.x = randomInt();\n    } else {\n      this.x = x;\n    }\n\n    if (y == undefined) {\n      this.y = randomInt();\n    } else {\n      this.y = y;\n    }\n\n    if (z == undefined) {\n      this.z = -400;\n    } else {\n      this.z = z;\n    }\n  }\n}\n\nclass AtlasGeometry extends THREE.Geometry {\n  constructor(atlas, points) {\n    super();\n\n    for (var i = 0; i < atlas.numImages; i++) {\n      // Create x, y, z coords for this subimage\n      const coords = points[i];\n\n      this.vertices.push(\n        new THREE.Vector3(coords.x, coords.y, coords.z),\n        new THREE.Vector3(coords.x + atlas.image.width, coords.y, coords.z),\n        new THREE.Vector3(\n          coords.x + atlas.image.width,\n          coords.y + atlas.image.height,\n          coords.z\n        ),\n        new THREE.Vector3(coords.x, coords.y + atlas.image.height, coords.z)\n      );\n\n      // Add the first face (the lower-right triangle)\n      var faceOne = new THREE.Face3(\n        this.vertices.length - 4,\n        this.vertices.length - 3,\n        this.vertices.length - 2\n      );\n\n      // Add the second face (the upper-left triangle)\n      var faceTwo = new THREE.Face3(\n        this.vertices.length - 4,\n        this.vertices.length - 2,\n        this.vertices.length - 1\n      );\n\n      // Add those faces to the geometry\n      this.faces.push(faceOne, faceTwo);\n\n      // Identify this subimage's offset in the x dimension\n      // An xOffset of 0 means the subimage starts flush with\n      // the left-hand edge of the atlas\n      var xOffset = (i % 10) * (atlas.image.width / atlas.width);\n\n      // Identify the subimage's offset in the y dimension\n      // A yOffset of 0 means the subimage starts flush with\n      // the top edge of the atlas\n      var yOffset = Math.floor(i / 10) * (atlas.image.height / atlas.height);\n\n      // Use the xOffset and yOffset (and the knowledge that\n      // each row and column contains only 10 images) to specify\n      // the regions of the current image\n      this.faceVertexUvs[0].push([\n        new THREE.Vector2(xOffset, yOffset),\n        new THREE.Vector2(xOffset + 0.1, yOffset),\n        new THREE.Vector2(xOffset + 0.1, yOffset + 0.1)\n      ]);\n\n      // Map the region of the image described by the lower-left,\n      // upper-right, and upper-left vertices to `faceTwo`\n      this.faceVertexUvs[0].push([\n        new THREE.Vector2(xOffset, yOffset),\n        new THREE.Vector2(xOffset + 0.1, yOffset + 0.1),\n        new THREE.Vector2(xOffset, yOffset + 0.1)\n      ]);\n    }\n  }\n}\n\nexport class ThreeRenderer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.dataset = props.dataset;\n    this.canvasWidth = props.canvasWidth;\n    this.canvasHeight = props.canvasHeight;\n  }\n\n  // Appends a new canvas element to this.mount\n  createCanvas() {\n    const canvas = document.createElement('canvas');\n    this.mount.appendChild(canvas);\n    canvas.style.height = this.canvasHeight;\n    canvas.style.width = this.canvasWidth;\n    \n    return canvas;\n  }\n\n  // Creates a new Three.js camera object\n  createCamera() {\n    const fov = 90;\n    const aspect = 2; // the canvas default\n    const nearClippingPlane = 0.1;\n    const farClippingPlane = 10000;\n    const camera = new THREE.PerspectiveCamera(\n      fov,\n      aspect,\n      nearClippingPlane,\n      farClippingPlane\n    );\n    camera.position.z = 500;\n\n    return camera;\n  }\n\n  componentDidMount() {\n    const canvas = this.createCanvas();\n    const renderer = new THREE.WebGLRenderer({antialias: true, canvas});\n    renderer.setSize(800, 800);\n\n    const scene = new THREE.Scene();\n    const camera = this.createCamera();\n\n    const light = new THREE.PointLight(0xffffff, 0.7, 0);\n    light.position.set(1, 1, 100);\n    scene.add(light);\n\n    const controls = new TrackballControls(camera, renderer.domElement);\n\n    const loader = new THREE.TextureLoader();\n    loader.setCrossOrigin('anonymous');\n\n    const query = '/spritesheet-retrieval?dataset='.concat(this.dataset);\n\n    // Load an image file into a custom material\n    const material = new THREE.MeshBasicMaterial({\n      map: loader.load(query)\n    });\n\n    // Identify the subimage size in px\n    const image = new Image(128);\n\n    // Identify the total number of cols & rows in the image atlas\n    const atlas = new Atlas(image, 1, 1, 1);\n\n    // Create list of (random) points to map images to\n    // Later on, this will be t-SNE coordinates\n    const points = [];\n    for (var i = 0; i < atlas.numImages; ++i) {\n      points[i] = new Point();\n    }\n\n    // ------ CREATING CUSTOM GEOMETRY -------\n    const geometry = new AtlasGeometry(atlas, points);\n\n    const mesh = new THREE.Mesh(geometry, material);\n    mesh.position.set(0, 0, 0);\n    scene.add(mesh);\n\n    function render() {\n      renderer.render(scene, camera);\n      requestAnimationFrame(render);\n      controls.update();\n    }\n\n    render();\n  }\n\n  render(){\n    return(\n      <div ref={ref => (this.mount = ref)} />\n    )\n  }\n}\n","import React from 'react';\nimport EmbeddingForm from './Form';\nimport styles from './App.scss';\nimport {ThreeRenderer} from './threeVisualizer.js'\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { datasets: [],\n                    selectedDataset: \"\" };\n    this.fetchUserDatasets = this.fetchUserDatasets.bind(this);\n    this.selectionCallback = this.selectionCallback.bind(this);\n  }\n\n  selectionCallback(selection) {\n    this.setState(() => {\n      return {selectedDataset: selection};\n      }, () => {console.log(\"dataset set to: \" + selection)});\n  }\n\n  componentDidMount() {\n    this.fetchUserDatasets();\n  }\n\n  fetchUserDatasets() {\n    fetch(\"/dataset-names\").then(response => response.json()).then(userDatasets => {\n      // Store the names of the datasets the user has made\n      this.setState({ datasets: userDatasets });\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <EmbeddingForm userDatasets={this.state.datasets} callback={this.selectionCallback} />\n        <ThreeRenderer canvasWidth={800} canvasHeight={800} dataset={this.state.selectedDataset}/>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}