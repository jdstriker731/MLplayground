{"version":3,"sources":["UploadIndicator.js","CreationModal.js","Form.js","App.js","serviceWorker.js","index.js"],"names":["UploadIndicator","show","className","type","color","height","width","top","bottom","CreationModal","close","children","useState","files","setFiles","datasetName","setDatasetName","hasName","setHasName","infoAvailable","setInfoAvailable","uploading","setUploading","uploadComplete","setUploadComplete","delay","ms","Promise","res","setTimeout","clearStateAndClose","document","getElementById","reset","a","id","action","method","enctype","name","placeholder","onChange","event","persist","target","value","multiple","disabled","accept","htmlFor","length","onClick","checkLoginStatus","window","location","replace","EmbeddingForm","props","menuItems","state","values","createMode","showModal","bind","hideModal","this","setState","onSubmit","handleSubmit","map","menuItem","key","title","index","React","Component","items","App","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8c900b89.chunk.js","sourcesContent":["import React from 'react';\nimport Loader from 'react-loader-spinner';\n\nfunction UploadIndicator({ show }) {\n\n  return (\n    show && (\n      <div className=\"creation-modal\">\n        <Loader\n          type=\"TailSpin\"\n          color=\"#4287f5\"\n          height=\"100\"\n          width=\"100\"\n          top=\"auto\"\n          bottom=\"auto\"\n        /> \n      </div>\n    )\n  );\n}\n\nexport default UploadIndicator;\n","import React, { useState } from 'react';\nimport UploadIndicator from './UploadIndicator.js';\nimport styles from './CreationModal.scss';\n\nfunction CreationModal({ show, close, children }) {\n  // ------STATE MANAGEMENT-------\n  const [files, setFiles] = useState([]);\n  const [datasetName, setDatasetName] = useState(\"\");\n  const [hasName, setHasName] = useState(false);\n  const [infoAvailable, setInfoAvailable] = useState(false);\n  const [uploading, setUploading] = useState(false);\n  const [uploadComplete, setUploadComplete] = useState(false);\n  const delay = ms => new Promise(res => setTimeout(res, ms));\n\n  function datasetNameChange(event) {\n    event.persist();\n    setDatasetName(event.target.value);\n    setHasName(true);\n  }\n\n  function fileUpload(event) {\n    event.persist();\n    setFiles([...files, ...event.target.files]);\n    setInfoAvailable(true);\n  }\n\n  // Resets state to default values so that dialog refreshes if user enters again\n  function clearStateAndClose() {\n    setFiles([]);\n    setDatasetName([]);\n    setHasName(false);\n    setInfoAvailable(false);\n    setUploadComplete(false);\n    document.getElementById(\"input-dialog\").reset();\n\n    close();\n  }\n  \n  async function datasetUpload() {\n    setUploading(true);\n    await delay(4000); // Temporarily mock upload until web infrastructure in place\n    setUploading(false);\n    setUploadComplete(true);\n  }\n  \n  return (\n    show && (\n    <div className='creation-modal'>\n      <section className=\"modal-main\">\n        <UploadIndicator show={uploading}/>\n        <form className=\"input-dialog\" id=\"input-dialog\" action=\"/upload\" method=\"POST\" enctype=\"multipart/form-data\">\n          <input\n            type=\"text\"\n            className=\"dataset-namer\"\n            id=\"dataset-namer\"\n            name=\"dataset-namer\"\n            placeholder=\"Dataset name...\"\n            onChange={datasetNameChange}\n          />\n          <input\n            type=\"file\"\n            multiple=\"multiple\"\n            className=\"file-upload-dialog\"\n            id=\"file-upload-dialog\"\n            name=\"file-upload-dialog\"\n            onChange={fileUpload}\n            disabled={!hasName}\n            accept=\".jpg, .jpeg, .png\"\n          />\n          <label className=\"file-label\" htmlFor=\"file-upload-dialog\">\n            Browse for photos\n          </label>\n          <div className=\"uploadInfo\">\n            <div className=\"dataset-info\" disabled={!infoAvailable}>\n              <p>Dataset Info:</p>\n              <p>Name: {datasetName.length ? datasetName : \"N/A\"}</p>\n              <p>Number of images: {files.length > 0 ? files.length : \"N/A\"}</p>\n            </div>\n            {!uploadComplete && (\n              <button\n                type=\"submit\"\n                className=\"dataset-upload\"\n                disabled={!infoAvailable}\n                onClick={datasetUpload}\n              >\n                Upload dataset\n              </button>\n            )}\n          </div>\n          {uploadComplete && (\n            <div className=\"post-upload\">\n              <p>Dataset upload complete!</p>\n              <button className=\"close-modal\" onClick={clearStateAndClose}>\n                Close\n              </button>\n            </div>\n          )}\n        </form>\n        {!uploadComplete && (\n          <button className=\"cancel\" onClick={clearStateAndClose}>\n            Cancel\n          </button>\n        )}\n      </section>\n    </div>\n  ));\n}\n\nexport default CreationModal;\n","import React from 'react';\nimport CreationModal from './CreationModal.js';\n\nconst checkLoginStatus = () => {\n  // Determine Log-in status of user\n  window.location.replace('/authenticate');\n};\n\nclass EmbeddingForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.menuItems = props.menuItems;\n    this.state = {\n      values: [],\n      createMode: false\n    };\n\n    this.showModal = this.showModal.bind(this);\n    this.hideModal = this.hideModal.bind(this);\n  }\n\n  // Handles showing and hiding modal for dataset uploads\n  showModal() {\n    this.setState({ createMode: true });\n  }\n\n  hideModal() {\n    this.setState({ createMode: false });\n  }\n\n  render() {\n    return (\n      <div className=\"form-wrapper\">\n        <CreationModal show={this.state.createMode} close={this.hideModal} />\n        <button type=\"button\" onClick={checkLoginStatus}>Login/Logout</button>\n        <br />\n        <div className=\"form\">\n          <form className=\"embedding-form\" onSubmit={this.handleSubmit}>\n            {this.menuItems.map(menuItem => (\n              <label key={menuItem.title} className=\"form-category\">\n                <span className=\"category-title\">{menuItem.title}:</span>\n                <select value={this.state.values[menuItem.index]}>\n                  {menuItem.values.map(value => (\n                    <option className=\"form-option\" key={value} value={value}>\n                      {value}\n                    </option>\n                  ))}\n                </select>\n              </label>\n            ))}\n            <button type=\"submit\" className=\"form-submit\">\n              Submit\n            </button>\n          </form>\n        </div>\n        <button\n          type=\"button\"\n          className=\"create-dataset-button\"\n          onClick={this.showModal}\n        >\n          Create a new dataset\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default EmbeddingForm;\n","import React from 'react';\nimport EmbeddingForm from './Form';\nimport styles from './App.scss';\n\nconst items = [\n  {\n    index: 0,\n    title: 'Model',\n    values: ['DeLF']\n  },\n  {\n    index: 1,\n    title: 'Visualizer',\n    values: ['t-SNE']\n  },\n  {\n    index: 2,\n    title: 'Dataset',\n    values: ['Dataset 1', 'Dataset 2']\n  }\n];\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <EmbeddingForm menuItems={items} />\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}